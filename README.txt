Team: (Name, UNI)
Pei-Huan Tsai, pt2630

Requirement:
1. C++11    --> for scanner
2. Python3  --> for parser and code generator
3. ESP (https://www.esp.cs.columbia.edu/) --> SoC/accelerator synthesis and integration after code generation.
    (a) The code generator generates code for accelerator designs that can be integrated into an SoC using ESP, an open-source SoC platform.
    (b) ESP installation (https://www.esp.cs.columbia.edu/docs/setup/setup-guide/)

Since ESP installation will take a lot of time, please just take a look at the video to see how the generated code works.

========== code optimization ==========

=======================================


===== Previous videos about code generation and execution ========
Video demo:
https://youtu.be/17vUWnBCNHs

Video demo2: (In this part, I just show other code executions, the first demo is more important)
https://youtu.be/yvfQ0kh4hak
==================================================================

Work flow: 
1. The compiler framework generates Python programs.
2. We execute the generated Python programs to modify the template (code_template/) and get some accelerator code.
3. We copy the code into corresponding places in the accelerator template (huangemmplt_stratus/).
4. We can further copy the accelerator template into ESP folder for SoC generation (In theory, we could proceed to bitstream generation and run the applications mentioned in the proposal on FPGAs. However, to save time, the demo focuses on demonstrating the behavioral simulation results to showcase the feasibility of the workflow.)


How to compile and run the program: (The following commands correspond to the work flow mention above)
1. 
==== generate ast ====
make clean;make ast-files, or 
bash test_all.sh    --> recommended
==== code generation ====
make code-gen

2. 
make code-exec

3. 
make install, or 
manually copy the code you want (make install-2, make install-3-0, make install-3-1, make install-4 are also provided)


4. 
move the huangemmplt_stratus into the ESP folder: "esp/accelerators/stratus_hls/.", where esp is the folder of your esp installation
execute "make huangemmplt_stratus-exe" to perform behavioral simulation

if you want to execute all commands:
you can execute "bash run_all.sh", which execute the steps 1~3.
For the fourth step, please see the video demo to save your time.




=== Different input files and what is their purpose of testing ===
1. example_inputs/simple1.hl: constant propagation + constant folding + dead code elimination.
2. example_inputs/simple2.hl: common subexpression elimination.
3. example_inputs/simple3.hl: multi-pass optimization with all technique combined
4. example_inputs/simple4.hl: accelerator reuse (remove accelerators with same dimension)
5. example_inputs/simple5.hl: accelerator delegation (remove accelerators with dimensions strictly dominated by others)

*** the reason for 5. is that we can always delegate operations of small accelerators to larger ones *** 

=== Outputs ===
code_generation/test1/generator.py: After constant propagation and folding, we can observe that t = 3
code_generation/test2/generator.py: Following common subexpression elimination (with constant propagation disabled), we observe that r = t.
code_generation/test3/generator.py: All variables are ultimately reduced to the constant 6.
code_generation/test4/generator.py: Only one accelerator code is generated since the two registered operations are identical.
code_generation/test5/generator.py: Only the larger-dimension accelerator is generated, as the smaller one can be delegated to it.

Executing generator.py will generate skeleton codes for accelerators under each folder.


======== files =======
scanner.cpp: source code of the scanner
tph_parser.py: source code of the parser
code_generator_parsing_input.py: source code of the code generator
example_inputs/*.hl: programs using my own language
test_all.sh: the shell script to execute all commands until parser, generating asts
run_all.sh: the shell script for the whole execution of the compiler flow
Makefile: some targets to use

===== compiler programs ===
scanner.cpp: source code of the scanner
tph_parser.py: source code of the parser
code_generator_parsing_input.py: code generator

======== generated files =======
tokenized_inputs/*.txt: files generated by the scanner program
ast_outputs/*.txt: AST generated by the parser

code_generation/test*/generator.py: codes generated by the code generator
code_generation/test*/FC_*: hardware code

======== templates =========
code_template/: hardware code template
huangemmplt_stratus/: accelerator template that can be modified and installed into ESP
 




